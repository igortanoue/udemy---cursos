
// // // // // // // */
// // // // // // // /*
// // // // // // //  Não pode criar variavel com palavras reservadas
// // // // // // //  Utilizamos camelCase
// // // // // // //  Variaveis precisam ter nomes significativos
// // // // // // //  não pode começar com número o nome da variavel
// // // // // // //  Não podem conter espaços ou traços
// // // // // // //  Case-sensitive
// // // // // // //  Não podemos redeclarar variaveis com let
// // // // // // // // // // // */

// // // // // // // // // // // /*
// // // // // // // // // // //  Não pode criar constante com palavras reservadas
// // // // // // // // // // //  Utilizamos camelCase
// // // // // // // // // // //  constantes precisam ter nomes significativos
// // // // // // // // // // //  não pode começar com número o nome da constante
// // // // // // // // // // //  Não podem conter espaços ou traços
// // // // // // // // // // //  Case-sensitive
// // // // // // // // // // //  Não podemos modificar uma constante
// // // // // // // // // // //  não utilize var e sim const
// // // // // // // // // // // */

// // // // // // // // // // // let nome = 'luiz' // string
// // // // // // // // // // // let num10 = 10// number
// // // // // // // // // // // let nomeAluno; // undefined -> não aponta para local nenhuma na memoria
// // // // // // // // // // // let sobrenomeAluno = null; // Nulo -> quer q não aponte nenhum p nenhum valor. não pode ser const - é considerado objeto
// // // // // // // // // // // let resposta; // Boolean -> True ou False (Valor lógico)
// // // // // // // // // // // console.log(typeof sobrenomeAluno, sobrenomeAluno)

// // // // // // // // // // // /*
// // // // // // // // // // // ordem precedencia
// // // // // // // // // // // ()
// // // // // // // // // // // **
// // // // // // // // // // // * / %
// // // // // // // // // // // + - 

// // // // // // // // // // // Icremento = ++
// // // // // // // // // // // Decremento = --
// // // // // // // // // // // */

// // // // // // // // // // // /*
// // // // // // // // // // // let umaString= "Um\"texto\"";   // barra invertida escape
// // // // // // // // // // // console.log(umaString);
// // // // // // // // // // // */

// // // // // // // // // // // let umaString= "Um texto";
// // // // // // // // // // // console.log(umaString.charAt(3));   // .charAt()metodo pra mostrar o elemento, igual o []

// // // // // // // // // // // console.log(umaString.indexOf('texto'))//.indexOf Pesquisa o elemento inicial da string, caso o final é lastIndexOf

// // // // // // // // // // // console.log(umaString.match(/[a-z]/g)); // procura uma expressão regular, essa seria todas letras minuscular no texto

// // // // // // // // // // // console.log(umaString.replace('Um', 'Outro')) // replace substitui

// // // // // // // // // // // elementos = umaString.length;
// // // // // // // // // // // //console.log(umaString.slice(2,5)); // corta a string pelos elementos (-2) Começa do penultimo elemento

// // // // // // // // // // // console.log(umaString.split(' ',2)); // separa as string

// // // // // // // // // // // //olhar a documentação na w3scholl js  //mdn javascript

// // // // // // // // // // // console.log(umaString.toUpperCase()); // maiuscula, minuscula é toLowerCase() método.

// // // // // // // // // // // num1 = Number(num1.toFixed(2));  // maneira adequada para arrendondar o numero e ser inteiro
// // // // // // // // // // // console.log(num1);
// // // // // // // // // // // console.log(Number.isInteger(num1));


// // // // // // // // // // // // IEEE 754-2008 CALCULO DO JS
// // // // // // // // // // // /*
// // // // // // // // // // // console.log(num1.toString() + num2);   // variavel.toString() e não altera o valor da variavel 
// // // // // // // // // // // console.log(num1.toFixed(2)); //definir as casas decimais
// // // // // // // // // // // console.log(Number.isInteger(num1)); // retorna se é numero inteiro ou não

// // // // // // // // // // // let temp = num1 * 'Oi';
// // // // // // // // // // // console.log(Number.isNaN(temp)); // Estou perguntando se essa conta é um Is not a number (conta invalida)
// // // // // // // // // // // */

// // // // // // // // // // // //objeto math

// // // // // // // // // // // let num1 = 9.51;

// // // // // // // // // // // //let num2 = Math.floor(num1); // Arrendondando para baixo!
// // // // // // // // // // // //let num2 = Math.ceil(num1); // Arrendoda para cima
// // // // // // // // // // // //let num2 = Math.round(num1); // Arrendoda para o mais proximo.
// // // // // // // // // // // //console.log(Math.max(1,2,3,4,5,-10,-50,1500,100)); // mostra o maior
// // // // // // // // // // // //console.log(Math.min(1,2,3,4,5,-10,-50,1500,100)); // mostra o menor
// // // // // // // // // // // const aleatorio = Math.round(Math.random() * (10-5)+5); // numero aleatorio de 0 e 1 porem pode fazer contas pra aumentar
// // // // // // // // // // // console.log(aleatorio);
// // // // // // // // // // // //console.log(Math.pow(2,10)) // potencia 2 ** 10
// // // // // // // // // // // //console.log(Math.PI); // valor do pi
// // // // // // // // // // // console.log(1/0.0) // retorna infinity, ocupa muito espaço na memoria e retorna Infinity e True.

// // // // // // // // // // // // array

// // // // // // // // // // // // alunos.push('Carlos');  // Adiciona um elemento ao final do array
// // // // // // // // // // // // alunos.unshift('Souza'); // Adiciona no primeiro elemento
// // // // // // // // // // // //console.log(alunos.slice(-2,)); // Fatiamento.

// // // // // // // // // // // //let removido = alunos.pop(); // pode salvar o elemento removido em uma variavel
// // // // // // // // // // // //alunos.shift(); // remove o primeiro elemento
// // // // // // // // // // // //alunos.pop(); // remove o ultimo elemento
// // // // // // // // // // // //delete alunos[1]; // remove o valor do item e deixa undefined o elemento

// // // // // // // // // // // //console.log(typeof alunos); // array é um objeto indexado
// // // // // // // // // // // //console.log(alunos instanceof Array); // pergunta se alunos é uma instancia de array

// // // // // // // // // // // //console.log(alunos.lenght) // tamanho do array

// // // // // // // // // // // // objeto
// // // // // // // // // // // function criaPessoa (nome,sobrenome,idade){         //Parametro
// // // // // // // // // // //     return {  // nome, sobrenome, idade FUNCIONA DESSA FORMA TAMBEM
// // // // // // // // // // //         nome: nome,                               // retorna um objeto literal {}
// // // // // // // // // // //         sobrenome: sobrenome,
// // // // // // // // // // //         idade: idade
// // // // // // // // // // //     };
// // // // // // // // // // // }
// // // // // // // // // // // let pessoa1= criaPessoa('Luiz','Otavio',25);             //Argumento
// // // // // // // // // // // let pessoa2= criaPessoa('Maria','Silva',45);  
// // // // // // // // // // // let pessoa3= criaPessoa('Carlos','Souza',23);  
// // // // // // // // // // // let pessoa4= criaPessoa('José','Matia',73);  
// // // // // // // // // // // let pessoa5= criaPessoa('Jean','Cruz',56);  



// // // // // // // // // // // console.log(pessoa1.nome);

// // // // // // // // // // // /*
// // // // // // // // // // // Primitivos (imutaveis) - string, number, boolean, undefined, null (bigint, symbol)
// // // // // // // // // // // Referencia (mutávlel) - array, object, function
// // // // // // // // // // // */
// // // // // // // // // // // /*
// // // // // // // // // // // PRIMITIVO
// // // // // // // // // // // let a = 'A';
// // // // // // // // // // // let b = a; // Cópia
// // // // // // // // // // // console.log(a,b);

// // // // // // // // // // // a = 'Outra coisa';
// // // // // // // // // // // console.log(a, b);
// // // // // // // // // // // */
// // // // // // // // // // //  /*
// // // // // // // // // // // let a = [1, 2, 3];
// // // // // // // // // // // let b = a; 
// // // // // // // // // // // let c = [...a];  // Para fazer a copia sem ser por referencia.

// // // // // // // // // // // /*
// // // // // // // // // // // Operadores de comparação
// // // // // // // // // // // > maior que
// // // // // // // // // // // >= Maior que ou igual
// // // // // // // // // // // < menor que
// // // // // // // // // // // <= menor que ou igual a 
// // // // // // // // // // // == igualdade  (valor)        *********** não usar
// // // // // // // // // // // ===  igualdade estrita  (valor e tipagem)
// // // // // // // // // // // !- diferente                 ************ não usar
// // // // // // // // // // // !== diferente estrito    (valor e tipo)
// // // // // // // // // // // */

// // // // // // // // // // // // Operadores Logicos
// // // // // // // // // // // // && -> And -> E  -> Todas as expressões precisam ser verdadeiras para retornar true
// // // // // // // // // // // // || -> OR -> Ou   Alt+124  -> Se uma for verdadeira ela retorna True
// // // // // // // // // // // // ! -> NOT -> NÃO  -> Inverte o valor de true pra false


// // // // // // // // // // // // ternaria
// // // // // // // // // // // // (condicao) ? 'Valor para Verdadeiro'  : 'Valor para falso';  

// // // // // // // // // // // const pontuacaoUsuario = 999;         //   Verdadeira acontece isso    // Ou se não acontece isso.
// // // // // // // // // // // const nivelUsario = pontuacaoUsuario >= 1000 ? 'Usuário VIP'             : 'Usuario normal';

// // // // // // // // // // // const data = new Date();
// // // // // // // // // // // console.log('Dia', data.getDate());
// // // // // // // // // // // console.log('Mês', data.getMonth() +1);
// // // // // // // // // // // console.log('Ano', data.getFullYear());
// // // // // // // // // // // console.log('Hora', data.getHours());
// // // // // // // // // // // console.log('Min', data.getMinutes());
// // // // // // // // // // // console.log('Seg', data.getSeconds());
// // // // // // // // // // // console.log('Ms', data.getMilliseconds());
// // // // // // // // // // // console.log('Dia Semana', data.getDay()); // 0 - Domingo, 6 - Sabado
// // // // // // // // // // // console.log(Date.now()); // da o valor em milesimo de segundo e da pra jogar na new date ()
// // // // // // // // // // // console.log(data.toString());  

// // // // // // // // // // // // Declaração de função ( Function hoisting ) hoisting = eleva as declarações de funcções para o topo do js, pode ser chamada antes ou depois de criar ela.

// // // // // // // // // // // // First-class objects ( Objetos de primeira classe.)

// // // // // // // // // // // arguments que sustenta todos argumentos enviados.
// // // // // // // // // // function funcao() {
// // // // // // // // // //     let total = 0
// // // // // // // // // //     for (let argumento of arguments) {
// // // // // // // // // //         total += argumento;
// // // // // // // // // //     }
// // // // // // // // // //     console.log(total);

// // // // // // // // // // }
// // // // // // // // // // //     Argumento
// // // // // // // // // // funcao( 1, 2, 3, 4, 5, 6, 7, 8);

// // // // // // // // // // escopo lexico vai de baixo para cima procurando as variaveis pelos vizinhos
// // // // // // // // // // closure é a habilidade que a funcao tem de acessar seu escopo lexico, da mãe e global.
// // // // // // // //     // número randomico
// // // // // // // // // function rand(min = 1000, max = 3000) {
// // // // // // // // //     const num = Math.random() * (max - min) + min;
// // // // // // // // //     return Math.floor(num);
// // // // // // // // // }

// // // // // // // // function rand(min = 1000, max = 3000) {
// // // // // // // //     const num = Math.random() * (max - min) + min;
// // // // // // // //     return Math.floor(num);
// // // // // // // // }

// // // // // // // // function f1(callback) {
// // // // // // // //     setTimeout(function () {
// // // // // // // //         console.log('f1');
// // // // // // // //         if (callback) callback();
// // // // // // // //     }, rand());

// // // // // // // // }
// // // // // // // // function f2(callback) {
// // // // // // // //     setTimeout(function () {
// // // // // // // //         console.log('f2');
// // // // // // // //         if (callback) callback();
// // // // // // // //     }, rand());
// // // // // // // // }
// // // // // // // // function f3(callback) {
// // // // // // // //     setTimeout(function () {
// // // // // // // //         console.log('f3');
// // // // // // // //         if (callback) callback();
// // // // // // // //     }, rand());
// // // // // // // // }

// // // // // // // // f1(function() {
// // // // // // // //     f2(function(){
// // // // // // // //         f3(function(){
// // // // // // // //             console.log('Olá mundo!')
// // // // // // // //         });
// // // // // // // //     });
// // // // // // // // });

// // // // // // // // // Function geradora
// // // // // // // // function* geradora5() {
// // // // // // // //     yield function() {
// // // // // // // //         console.log('Vim do y1');
// // // // // // // //     };
// // // // // // // // //    return function() {
// // // // // // // // //        console.log('Vim do return');      quando se utiliza return os yield param de contar. 
// // // // // // // // //    };
// // // // // // // //     yield function() {
// // // // // // // //         console.log('Vim do y2');
// // // // // // // //     };
// // // // // // // // }
// // // // // // // // Para acessar os valores do yield. utiliza o metodo next().value. podendo usar um for OF para valores.
// // // // // // // // const g5 = geradora5();
// // // // // // // // const func1 = g5.next().value;
// // // // // // // // const func2 = g5.next().value;

// // // // // // // // //              0        1        2             3       4
// // // // // // // // const nomes = ['Maria', 'João', 'Eduardo', 'Gabriel', 'Julia'];


// // // // // // // // //nomes.splice(indice, delete quantos elementos , elementoadd1,elementoadd2);

// // // // // // // // const removidos = nomes.splice(3, 2, 'Igor');
// // // // // // // // simular o pop
// // // // // // // // const pop = nomes.splice(-1,1);
// // // // // // // //shift  remover o primeiro elemento
// // // // // // // // const shift = nomes.splice(0,1);

// // // // // // // // //push adicionar no ultimo elemento, porem push é mais pratico
// // // // // // // // const push = nomes.splice(nomes.length, 0, 'Luiz')
// // // // // // // //unshift adicionar o primeiro elemento
// // // // // // // // const unshift = nomes.splice(0 , 0, 'Ana');

// // // // // // // // console.log(nomes, removidos);

// // // // // // // // literal 
// // // // // // // const pessoa = {
// // // // // // // // Chaves  // Valor
// // // // // // //     nome: 'Luiz', 
// // // // // // //     sobrenome: 'Otávio',
// // // // // // //     idade: 15
// // // // // // // };

// // // // // // // const chave = 'idade';
// // // // // // // console.log(pessoa['nome']);
// // // // // // // console.log(pessoa.sobrenome);
// // // // // // // console.log(pessoa[chave]);

// // // // // // // // construtor 
// // // // // // // const pessoa1 = new Object();
// // // // // // // pessoa1.nome = 'Igor';
// // // // // // // pessoa1.sobrenome= 'Tanoue;'
// // // // // // // pessoa1.idade = 30;

// // // // // // // pessoa1.falarNome = function() {
// // // // // // //     return (`${this.nome} está falando seu nome.`)
// // // // // // // };
// // // // // // // pessoa1.getDataNascimento = function () {
// // // // // // //     const dataAtual = new Date();
// // // // // // //     return  dataAtual.getFullYear() - this.idade;
// // // // // // // };

// // // // // // // // // // for (let chave in pessoa1) {
// // // // // // // // // //     console.log(pessoa1[chave]);
// // // // // // // // // // }

// // // // // // // // // // Factory function / constructor functions -- Criar objetos.. com padrões // Classes para criar objetos syntase sugar


// // // // // // // // // //Factory
// // // // // // // // // function criaPessoa (nome, sobrenome) {
// // // // // // // // //     return {
// // // // // // // // //         nome,
// // // // // // // // //         sobrenome,
// // // // // // // // //         // Se não usasse o get, apenas nomeCompleto() na chamada vc teria que por p1.nomeCompleto()
// // // // // // // // //         get nomeCompleto() {
// // // // // // // // //             return `${this.nome} ${this.sobrenome}`
// // // // // // // // //         }
// // // // // // // // //     };
// // // // // // // // // }

// // // // // // // // // const p1 = criaPessoa('Luiz', 'Otávio');
// // // // // // // // // console.log(p1.nomeCompleto)

// // // // // // // // //Constuctor

// // // // // // // // function Pessoa(nome, sobrenome) {
// // // // // // // //     this.nome = nome;
// // // // // // // //     this.sobrenome = sobrenome;
// // // // // // // // }
// // // // // // // // // {} < - this - > this
// // // // // // // // const p1 = new Pessoa('Luiz', 'Miranda');
// // // // // // // // // Pode alterar o valor da const , a referencia de memoria não pode...
// // // // // // // // p1.nome = 'Outra Coisa';

// // // // // // // // const p2 = new Pessoa('João', 'Cleber');
// // // // // // // // Object.freeze(p2); // Para não alterar o valore de um objeto ou array
// // // // // // // // console.log(p1, p2)

// // // // // // // /* 
// // // // // // // Metodos uteis para objetos
// // // // // // // Object.value
// // // // // // // Object.entries
// // // // // // // Object.assign(des, any)
// // // // // // // Object.getOwnPropertyDescriptor(o, 'prop')
// // // // // // // ...(spread)

// // // // // // // */

// // // // // // // /*
// // // // // // // Object.keys ( retorna as chaves)
// // // // // // // Object.freeze ( congela o objeto)
// // // // // // // Object.defineProperties (Define varias propriedades)
// // // // // // // Object.defineProperty (define uma propriedade) 
// // // // // // // /*
// // // // // // // const produto = { 
// // // // // // //     nome: 'Caneca', 
// // // // // // //     preco: 1.8
// // // // // // // };
// // // // // // // Object.freeze(produto); // não da pra alterar mais nada do objeto.

// // // // // // // const caneca = {
// // // // // // //     ...produto,
// // // // // // //     material: 'porcelana'
// // // // // // // };
// // // // // // // const caneca2 = Object.assign({},caneca, {tamanho: 'médio'});
// // // // // // // console.log(produto);
// // // // // // // console.log(caneca);
// // // // // // // console.log(caneca2);

// // // // // // // console.log(Object.keys(caneca2));
// // // // // // // console.log(Object.keys(caneca2));
// // // // // // // caneca2.tamanho = 'Gigante';
// // // // // // // console.log(Object.getOwnPropertyDescriptor(caneca2,'tamanho')); // ve as propriedades
// // // // // // // console.log(Object.values(caneca2)); // ve os valores
// // // // // // // console.log(Object.entries(caneca2)); // faz um array com os valores e chaves separados.
// // // // // // // for( let valor of Object.entries(caneca2)) {
// // // // // // //     console.log(valor[0], valor[1]);
// // // // // // // }
// // // // // // // */
// // // // // // // documentação map https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Map

// // // // // // const pessoas = [
// // // // // //     { id: 3, nome: 'Luiz'},
// // // // // //     { id: 2, nome: 'Maria'},
// // // // // //     { id: 1, nome: 'Helena'},
// // // // // // ];

// // // // // // // const novasPessoas = {};
// // // // // // // for (const {id, nome } of pessoas) {
// // // // // // //     novasPessoas[id] = {id, nome};
// // // // // // // }

// // // // // // // retorna em ordem crescente..



// // // // // // const novasPessoas = new Map();
// // // // // // for (const pessoa of pessoas) {
// // // // // //     const { id } = pessoa; 
// // // // // //     novasPessoas.set(id, {...pessoa});
// // // // // // }

// // // // // // console.log(novasPessoas);
// // // // // // console.log(novasPessoas.get(2));

// // // // // // for (const [identifier, {id, nome}] of novasPessoas) {
// // // // // //     console.log(identifier, id, nome);
// // // // // // }

// // // // // // symbol , criar uma chave privada no seu objeto.
// // // // // // ctrl + shift + l - alterar todos
// // // // // const _velocidade = Symbol('velocidade');

// // // // // class Carro {
// // // // //     constructor(nome, velocidade) {
// // // // //         this.nome = nome;
// // // // //         this[_velocidade] = 0;
// // // // //     }

// // // // //     set velocidade(valor) {
// // // // //         console.log('SETTER');
// // // // //         if(typeof valor !== 'number') return;
// // // // //         if(valor >= 100 || valor <= 0) return;
// // // // //         this[_velocidade] = valor;
// // // // //     }

// // // // //     get velocidade() {
// // // // //         console.log('GETTER');
// // // // //         return this[_velocidade]
// // // // //     }
// // // // //     acelerar() {
// // // // //         if (this[_velocidade] >= 100) return;
// // // // //         this[_velocidade]++;
// // // // //     }

// // // // //     freiar() {
// // // // //         if (this[_velocidade] <= 100) return;
// // // // //         this[_velocidade]--;
// // // // //     }
// // // // // }

// // // // // const c1 = new Carro('Fusca');
// // // // // for(let i = 0; i <= 200; i++){
// // // // //     c1.acelerar();
// // // // // }

// // // // // c1.velocidade = 99;
// // // // // console.log(c1.velocidade);

// // // // // Promises
// // // // // funcao de numero randomico
// // // // function rand(min, max) {
// // // //     min *= 1000;
// // // //     max *= 1000;
// // // //     return Math.floor(Math.random() * (max - min) + min);

// // // // }

// // // // function esperaAi(msg, tempo) {
// // // //     return new Promise((resolve, reject) => {
// // // //         if(typeof msg !== 'string') reject(new Error ('Erro')); 
// // // //         setTimeout(() => {
// // // //             resolve(msg);
// // // //         }, tempo);
// // // //     });




// // // // }
// // // // // Toda vez que o metodo Resolve for chamado o then é executado
// // // // // Toda vez que o Reject for chamado o catch é executado
// // // // esperaAi('Frase 1', rand(1,3))
// // // //     .then(resposta => {
// // // //         console.log(resposta);
// // // //         return esperaAi(55555555 , rand(1,3));
// // // //     })
// // // //     .then(resposta => {
// // // //         console.log(resposta)
// // // //         return esperaAi('Frase 3', rand(1,3));
// // // //     })
// // // //     .then(resposta => {
// // // //         console.log(resposta);
// // // //     })
// // // //     .then(() => {
// // // //         console.log('Eu serei o ultimo a ser exibido.');
// // // //     })
// // // //     .catch(e => {
// // // //         console.log('Erro:', e);
// // // //     });
// // // // Promises
// // // // funcao de numero randomico
// // // function rand(min, max) {
// // //     min *= 1000;
// // //     max *= 1000;
// // //     return Math.floor(Math.random() * (max - min) + min);

// // // }
// // // function esperaAi(msg, tempo) {
// // //     return new Promise((resolve, reject) => {
// // //         if(typeof msg !== 'string') {
// // //             reject(false); 
// // //             return;
// // //         }
// // //         setTimeout(() => {
// // //             resolve(msg.toUpperCase() + ' - Passei na Promise');
// // //             return;
// // //         }, tempo);
// // //     });
// // // }

// // // //Promise.all Promise.race Promise.resolve Promise.reject
// // // // All Executa todas promise - se uma cair no erro vai rejeitar todas.
// // // // Race - Corrida quem vai ser resolvida primeiro entrega o valor.
// // // // Resolve - 
// // // const promises = [
// // //     esperaAi('Promise 1', 3000),
// // //     esperaAi('Promise 2', 500),
// // //     esperaAi('Promise 3', 100),
// // //     esperaAi(1000, 1000),

// // // ];

// // // Promise.race(promises)
// // //     .then(valor => {
// // //         console.log(valor);
// // //     })
// // //     .catch(function(erro) {
// // //         console.log(erro)
// // //     });

// // // function baixaPagina() {
// // //     const emCache = true;
// // //     if(emCache) {
// // //         return Promise.reject('Pagina em cache');
// // //         return;
// // //     } else {
// // //         return esperaAi('Baixei a página', 3000);
// // //     }
// // // }

// // // baixaPagina()
// // //     .then(dadosPagina => {
// // //         console.log(dadosPagina);
// // //     })
// // //     .catch(e => {
// // //         console.log(e => console.log('ERRO', e));
// // //     });
// // //asyn await
// // function rand(min=0, max=3) {
// //     min *= 1000;
// //     max *= 1000;
// //     return Math.floor(Math.random() * (max - min) + min);

// // }
// // function esperaAi(msg, tempo) {
// //     return new Promise((resolve, reject) => {
// //         if(typeof msg !== 'string') {
// //             reject('Cai no Erro'); 
// //             return;
// //         }
// //         setTimeout(() => {
// //             resolve(msg.toUpperCase() + ' - Passei na Promise');
// //             return;
// //         }, tempo);
// //     });
// // }

// // // esperaAi('Fase 1', rand())
// // //     .then(valor => {
// // //         console.log(valor);
// // //         return esperaAi('Fase 2', rand())})
// // //         .then(fase => {
// // //             console.log(fase);
// // //             return esperaAi('Fase 3', rand);
// // //         })
// // //         .then(fase => {
// // //             console.log(fase);
// // //             return fase;
// // //         })
// // //         .then(fase => {
// // //             console.log('Terminamos na fase', fase);
// // //         })
// // //         .catch(e => console.log(e));
// //     // asyn permite você usar a palavra await...
// //     // Estados - Pendente ( Pending ) - Fullfilled (Resolvida) -> Reject (Rejeitada)
// // async function executa() {
// //     try {
// //         const fase1 = esperaAi('Fase 1', 1000);
// //         console.log(fase1);
// //         setTimeout(() => {
// //            console.log('Essa promise estava pendente', fase1) 
// //         }, 1100);
// //         const fase2 = await esperaAi('Fase 2', rand());
// //         console.log(fase2);
// //         const fase3 = await esperaAi('Fase 3', rand());
// //         console.log(fase3);
// //         console.log('Terminamos na fase: ', fase3);
// //     } catch(e) {
// //         console.log(e);
// //     }
    

// // }

// // executa();

// // import { padStart } from 'core-js/core/string'

// // npm i --save-dev @babel/preset-env @babel/core @babel/cli babel-loader webpack webpack-cli regenerator-runtime core-js@2

// // criar um arquivo webpack.config.js

// // const path = require('path'); // CommonJS padrão do Node

// // module.exports = {
// //     mode: 'development',
// //     entry: './src/index.js',
// //     output: {
// //         path: path.resolve(__dirname, 'public', 'assets','js'),
// //         filename: 'bundle.js'
// //     },
// //     module: {
// //         rules: [{
// //             exclude: /node_modules/,
// //             test: /\.js$/,
// //             use: {
// //                 loader: 'babel-loader',
// //                 options: {
// //                     presets: ['@babel/env']
// //                 }
// //             }
// //         }]
// //     },
// //     devtool: 'source-map'
// // };

// // usar npm i no terminal pra instalar.

// // // trazendo a pasta node modules
// // npm install

// // Exportar..

// const nome = 'Luiz';
// const sobrenome= 'Miranda';
// const idade = 30;

// export function soma(x, y) {
//     return x + y;
// }

// export default class Pessoa {
//     constructor(nome,sobrenome) {
//         this.nome= nome;
//         this.sobrenome = sobrenome;
//     }
// }

// export { nome, sobrenome as sobrenome2, idade};

// // geralmente é export em todos e exportar o modulo.

// //Imports
// // import * as MeuModulo from './modulo1';  importa tudo que tem export.
// // geralemente import Pessoa, {nome, sobrenome} from './modulo1';
// import { nome as nome2, sobrenome2, idade, soma} from './modulo1';
// import qualquerNome from './modulo1'; // importa só 1 Default pra poder alterar o nome.

// const nome = 'João';
// const p1 = new qualquerNome('Igor', 'Tanoue');
// console.log(p1);
// console.log(nome, sobrenome2,idade);
// console.log(nome2);
// console.log(soma(5,4));